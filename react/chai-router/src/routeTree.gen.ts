/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as AboutIndexImport } from './routes/about/index'
import { Route as ProductsIdImport } from './routes/products/$id'

// Create Virtual Routes

const ProductsRouteLazyImport = createFileRoute('/products')()

// Create/Update Routes

const ProductsRouteLazyRoute = ProductsRouteLazyImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/products/route.lazy').then((d) => d.Route),
)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AboutIndexRoute = AboutIndexImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsIdRoute = ProductsIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ProductsRouteLazyRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/products/$id': {
      id: '/products/$id'
      path: '/$id'
      fullPath: '/products/$id'
      preLoaderRoute: typeof ProductsIdImport
      parentRoute: typeof ProductsRouteLazyImport
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface ProductsRouteLazyRouteChildren {
  ProductsIdRoute: typeof ProductsIdRoute
}

const ProductsRouteLazyRouteChildren: ProductsRouteLazyRouteChildren = {
  ProductsIdRoute: ProductsIdRoute,
}

const ProductsRouteLazyRouteWithChildren =
  ProductsRouteLazyRoute._addFileChildren(ProductsRouteLazyRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/products': typeof ProductsRouteLazyRouteWithChildren
  '/products/$id': typeof ProductsIdRoute
  '/about': typeof AboutIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/products': typeof ProductsRouteLazyRouteWithChildren
  '/products/$id': typeof ProductsIdRoute
  '/about': typeof AboutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/products': typeof ProductsRouteLazyRouteWithChildren
  '/products/$id': typeof ProductsIdRoute
  '/about/': typeof AboutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/products' | '/products/$id' | '/about'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/products' | '/products/$id' | '/about'
  id: '__root__' | '/' | '/products' | '/products/$id' | '/about/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProductsRouteLazyRoute: typeof ProductsRouteLazyRouteWithChildren
  AboutIndexRoute: typeof AboutIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProductsRouteLazyRoute: ProductsRouteLazyRouteWithChildren,
  AboutIndexRoute: AboutIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/products",
        "/about/"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/products": {
      "filePath": "products/route.lazy.jsx",
      "children": [
        "/products/$id"
      ]
    },
    "/products/$id": {
      "filePath": "products/$id.jsx",
      "parent": "/products"
    },
    "/about/": {
      "filePath": "about/index.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
